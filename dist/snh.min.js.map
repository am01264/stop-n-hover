{"version":3,"sources":["/source/snh.js"],"names":["StopNHover","domTarget","oOptions","arguments","length","undefined","_classCallCheck","this","NodeList","Array","concat","_toConsumableArray","map","dom","classStop","classHover","sName","hasOwnProperty","_updateDeltas","fnScrollDelegator","_scrollDelegator","bind","window","setTimeout","addEventListener","rectTarget","getBoundingClientRect","deltaTop","top","deltaHeight","height","scrollTop","hover","stop","rClassReplace","RegExp","sClassNames","className","replace"],"mappings":"sgBASMA,sBASJ,QAAAA,GAAYC,GAA0B,GAAfC,GAAeC,UAAAC,QAAA,GAAAC,SAAAF,UAAA,MAAAA,UAAA,EAGpC,IAHoCG,gBAAAC,KAAAP,GAGhCC,YAAqBO,WAAYP,YAAqBQ,OACxD,SAAOC,OAAAC,mBAAIV,IAAWW,IAAI,SAAAC,GAAA,MAAO,IAAIb,GAAWa,EAAKX,IAGvDK,MAAKN,UAAYA,EACjBM,KAAKL,UACHY,UAAa,WACbC,WAAc,YAGhB,KAAK,GAAIC,KAASd,GACZA,EAASe,eAAeD,KAC1BT,KAAKL,SAASc,GAASd,EAASc,GAIpCT,MAAKW,eAEL,IAAMC,GAAoBZ,KAAKa,iBAAiBC,KAAKd,KACrDe,QAAOC,WAAW,EAAGJ,GACrBG,OAAOE,iBAAiB,SAAUL,gEASlC,GAAMM,GAAalB,KAAKN,UAAUyB,uBAClCnB,MAAKoB,SAAWF,EAAWG,IAC3BrB,KAAKsB,YAAcJ,EAAWK,kDAQ9BvB,KAAKW,gBAEDI,OAAOS,UAAaxB,KAAKsB,YAActB,KAAKoB,SAC9CpB,KAAKyB,QAELzB,KAAK0B,uCASP,GAAMhC,GAAYM,KAAKN,UACjBiC,EAAgB,GAAIC,QAAJ,UAAsB5B,KAAKL,SAASY,UAApC,QAAuD,KACvEsB,EAAcnC,EAAUoC,SAE9BpC,GAAUoC,UAAYD,EAAYE,QAAQJ,EAAe,OAAnC,IACd3B,KAAKL,SAASa,2CAQtB,GAAMd,GAAYM,KAAKN,UACjBiC,EAAgB,GAAIC,QAAJ,UAAsB5B,KAAKL,SAASa,WAApC,QAAwD,KACxEqB,EAAcnC,EAAUoC,SAE9BpC,GAAUoC,UAAYD,EAAYE,QAAQJ,EAAe,OAAnC,IACd3B,KAAKL,SAASY","file":"snh.min.js","sourcesContent":["/**\n * Simple toggle function between 2 classes based on scroll-positioning.\n * If the element is in the viewable area, it gets the class `options.classStop` (defaults to `snh-stop`)\n * Otherwise, if it's even a pixel out of view, it gets the class `options.classHover` (defaults to `snh-hover`)\n *\n * Useful for mostly CSS designs that need a hovering menu, that starts fixed to the top.\n *\n * Theoretically compatible back to IE5, although I'm unsure about the JSON type object instanciation.\n */\nclass StopNHover {\n\n\n  /**\n   * Sets up the element with scroll-handlers and initial classes.\n   *\n   * @param {Element|NodeList|Array} domTarget DOM Element(s) to be affected\n   * @param {Object} oOptions                  Key-Value hash of option-names and values\n   */\n  constructor(domTarget, oOptions = {}) {\n\n    // If an array is passed, run this constructor for all of them\n    if (domTarget instanceof NodeList || domTarget instanceof Array) {\n      return [...domTarget].map(dom => new StopNHover(dom, oOptions));\n    }\n\n    this.domTarget = domTarget;\n    this.oOptions = {\n      'classStop': 'snh-stop',\n      'classHover': 'snh-hover'\n    };\n\n    for (var sName in oOptions) {\n      if (oOptions.hasOwnProperty(sName)) {\n        this.oOptions[sName] = oOptions[sName];\n      }\n    }\n\n    this._updateDeltas();\n\n    const fnScrollDelegator = this._scrollDelegator.bind(this);\n    window.setTimeout(0, fnScrollDelegator);\n    window.addEventListener('scroll', fnScrollDelegator);\n  }\n\n  /**\n   * @private\n   * Update the scrolled top of the document & the height of our target element.\n   * Used internally as a convenience function. It does not trigger any further actions.\n   */\n  _updateDeltas() {\n    const rectTarget = this.domTarget.getBoundingClientRect();\n    this.deltaTop = rectTarget.top;\n    this.deltaHeight = rectTarget.height;\n  }\n\n  /**\n   * @private\n   * Launched internally on a scroll event or initial setup. It triggers either [hover]{@link #StopNHover.hover} or [stop]{@link #StopNHover.stop} depending on the scrolled top of the document.\n   */\n  _scrollDelegator() {\n    this._updateDeltas();\n\n    if (window.scrollTop > (this.deltaHeight + this.deltaTop)) {\n      this.hover();\n    } else {\n      this.stop();\n    }\n  }\n\n  /**\n   * Triggers the element to hover.\n   * Removes the `oOptions.classStop` class (default `snh-stop`) and replaces it with `oOptions.classHover` (default `snh-hover`).\n   */\n  hover() {\n    const domTarget = this.domTarget;\n    const rClassReplace = new RegExp(`([^|\\s])${this.oOptions.classStop}[\\s|$]`, 'g');\n    const sClassNames = domTarget.className;\n\n    domTarget.className = sClassNames.replace(rClassReplace, '$1')\n      + ` ${this.oOptions.classHover}`;\n  }\n\n  /**\n   * Triggers the element to stop.\n   * Replace the `oOptions.classHover` class (default `snh-hover`) with the `oOptions.classStop` (default `snh-stop`)\n   */\n  stop() {\n    const domTarget = this.domTarget;\n    const rClassReplace = new RegExp(`([^|\\s])${this.oOptions.classHover}[\\s|$]`, 'g');\n    const sClassNames = domTarget.className;\n\n    domTarget.className = sClassNames.replace(rClassReplace, '$1')\n      + ` ${this.oOptions.classStop}`;\n  }\n\n}\n"],"sourceRoot":"/source/"}